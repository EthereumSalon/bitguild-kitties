{"version":3,"sources":["../src/listener.js"],"names":["filterwatch","web3","eth","filter","address","topics","decodeData","log","from","data","slice","toString","to","kittenId","parseInt","transactionHash","socketList","registerSocket","sk","addr","toUpperCase","start","console","watch","err","error","Transactions","findOne","txHash","then","kitten","status","findOneAndUpdate","$set","new","Object","keys","indexOf","emit","catch"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,cAAcC,cAAKC,GAAL,CAASC,MAAT,CAAgB;AAClCC,WAAS,4CADyB;AAElCC,UAAQ,CACN,oEADM;AAF0B,CAAhB,CAApB;;AAQA,SAASC,UAAT,CAAoBC,GAApB,EAAwB;AACtB,SAAO;AACLC,UAAM,OAAKD,IAAIE,IAAJ,CAASC,KAAT,CAAe,IAAE,EAAjB,EAAoB,EAApB,EAAwBC,QAAxB,CAAiC,EAAjC,CADN;AAELC,QAAI,OAAKL,IAAIE,IAAJ,CAASC,KAAT,CAAe,KAAG,EAAlB,EAAqB,GAArB,CAFJ;AAGLG,cAAUC,SAASP,IAAIE,IAAJ,CAASC,KAAT,CAAe,MAAI,EAAnB,EAAsB,GAAtB,CAAT,EAAqC,EAArC,CAHL;AAILK,qBAAiBR,IAAIQ,eAAJ,CAAoBJ,QAApB;AAJZ,GAAP;AAMD;;AAED,IAAMK,aAAa,EAAnB;;kBAEe;AACbC,kBAAgB,wBAACC,EAAD,EAAKC,IAAL,EAAa;AAC3BH,eAAWG,KAAKC,WAAL,EAAX,IAAiCF,EAAjC;AACD,GAHY;AAIbG,SAAO,iBAAM;AACXC,YAAQf,GAAR,CAAY,kDAAZ;AACAP,gBAAYuB,KAAZ,CAAkB,UAASC,GAAT,EAAajB,GAAb,EAAiB;AACjC,UAAGiB,GAAH,EAAO,OAAOF,QAAQG,KAAR,CAAc,sBAAd,EAAqCD,GAArC,CAAP;;AAD0B,wBAEClB,WAAWC,GAAX,CAFD;AAAA,UAEzBC,IAFyB,eAEzBA,IAFyB;AAAA,UAEnBO,eAFmB,eAEnBA,eAFmB;;AAGjC,UAAGP,SAAO,4CAAV,EAAuD;AACrDkB,wBAAaC,OAAb,CAAqB,EAAEC,QAAQb,eAAV,EAArB,EACCc,IADD,CACM,kBAAQ;AACZ,cAAG,CAACC,MAAJ,EAAW;AACT,mBAAOR,QAAQf,GAAR,+CAAwDQ,eAAxD,cAAP;AACD,WAFD,MAEK;AACH,gBAAGe,OAAOC,MAAP,IAAe,SAAlB,EAA4B;AAC1B,qBAAOL,gBAAaM,gBAAb,CAA8B;AACnCJ,wBAAQb;AAD2B,eAA9B,EAEL;AACAkB,sBAAK;AACHF,0BAAQ,YADL;AAEHH,0BAAQb;AAFL;AADL,eAFK,EAOL;AACAmB,qBAAK;AADL,eAPK,EASJL,IATI,CASC,mBAAS;AACf,oBAAGM,OAAOC,IAAP,CAAYpB,UAAZ,EAAwBqB,OAAxB,CAAgC7B,KAAKY,WAAL,EAAhC,IAAoD,CAAC,CAAxD,EAA0D;AACxDJ,6BAAWR,KAAKY,WAAL,EAAX,EAA+BkB,IAA/B,CAAoC,6BAApC,EAAmE9B,IAAnE;AACD;AACF,eAbM,CAAP;AAcD;AACF;AACF,SAtBD,EAuBC+B,KAvBD,CAuBOjB,QAAQG,KAvBf;AAwBD;AACF,KA7BD;AA8BD;AApCY,C","file":"listener.js","sourcesContent":["import Transactions from './model';\nimport web3 from './utils/web3';\n\nconst filterwatch = web3.eth.filter({\n  address: '0x06012c8cf97BEaD5deAe237070F9587f8E7A266d',\n  topics: [\n    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', // Transfer\n    // '0x0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad5', // Birth\n  ] \n})\n\nfunction decodeData(log){\n  return {\n    from: '0x'+log.data.slice(2+24,66).toString(16),\n    to: '0x'+log.data.slice(66+24,130),\n    kittenId: parseInt(log.data.slice(131+58,195), 16),\n    transactionHash: log.transactionHash.toString()\n  }\n}\n\nconst socketList = {};\n\nexport default {\n  registerSocket: (sk, addr) =>{\n    socketList[addr.toUpperCase()] = sk;\n  },\n  start: () => {\n    console.log('\\x1b[32m>>> Listening to cryptokitties...\\x1b[0m');\n    filterwatch.watch(function(err,log){\n      if(err)return console.error('Filter Watch Error: ',err);\n      const { from, transactionHash } = decodeData(log);\n      if(from!=='0x0000000000000000000000000000000000000000'){\n        Transactions.findOne({ txHash: transactionHash })\n        .then(kitten=>{\n          if(!kitten){\n            return console.log(`\\x1b[90m>>> Skipped [Transaction] event: ${transactionHash} \\x1b[0m`);\n          }else{\n            if(kitten.status=='Pending'){\n              return Transactions.findOneAndUpdate({\n                txHash: transactionHash\n              },{\n                $set:{\n                  status: 'Successful',\n                  txHash: transactionHash\n                }\n              },{\n                new: true\n              }).then(updated=>{\n                if(Object.keys(socketList).indexOf(from.toUpperCase())>-1){\n                  socketList[from.toUpperCase()].emit('UPDATE_RELAVANT_TRANSACTION', from);\n                }\n              })\n            }\n          }\n        })\n        .catch(console.error)\n      }\n    })\n  }\n}"]}