{"version":3,"sources":["../src/listener.js"],"names":["filterwatch","web3","eth","filter","address","from","blockNumber","topics","decodeData","log","data","slice","toString","to","kittenId","parseInt","transactionHash","byAddrWithSocket","sk","addr","emit","err","watch","console","error","d","Date","Transactions","findOneAndUpdate","txHash","$set","status","new","then","catch","timestamp","toLocaleTimeString","start","findOne","kitten"],"mappings":"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","file":"listener.js","sourcesContent":["import Transactions from './model';\nimport { start } from 'repl';\nimport socket from './socket';\nimport web3 from './utils/web3';\n\nconst filterwatch = web3.eth.filter({\n  address: '0x06012c8cf97BEaD5deAe237070F9587f8E7A266d',\n  from: web3.eth.blockNumber,\n  topics: [\n    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', // Transfer\n    // '0x0a5311bd2a6608f08a180df2ee7c5946819a649b204b554bb8e39825b2c50ad5', // Birth\n  ] \n})\n\nfunction decodeData(log){\n  return {\n    from: '0x'+log.data.slice(2+24,66).toString(16),\n    to: '0x'+log.data.slice(66+24,130),\n    kittenId: parseInt(log.data.slice(131+58,195), 16),\n    transactionHash: log.transactionHash.toString()\n  }\n}\n\nexport default {\n  byAddrWithSocket: (sk, addr) =>{\n    try{sk.emit('UPDATE_TRANSACTION', 'start listening...')}catch(err){};\n    filterwatch.watch(function(err,log){\n      if(err)return console.error('Filter Watch Error: ',err);\n      const { from, to, kittenId, transactionHash } = decodeData(log);\n      const d = new Date;\n      if(from==addr){\n        // updating only when the addr match\n        console.log('bingGo!!!')\n        Transactions.findOneAndUpdate({\n          txHash: transactionHash\n        },{\n          $set:{\n            status: 'Successful',\n            txHash: transactionHash\n          }\n        },{\n          new: true\n        })\n        .then(dbKitten=>{\n          try{sk.emit('UPDATE_RELAVANT_TRANSACTION', {to, kittenId, transactionHash})}catch(err){};\n        }).catch(console.error)\n      }else if (from!=='0x0000000000000000000000000000000000000000'){\n        // console.log('\\x1b[90m[ethereum]\\t>>> skipped this [Transaction] event: \\x1b[0m', transactionHash);\n        try{sk.emit('UPDATE_TRANSACTION', {timestamp: d.toLocaleTimeString(), from, to, kittenId, transactionHash})}catch(err){};\n      }\n    });\n  },\n  start: () => {\n    console.log('\\x1b[32m>>> Listening to cryptokitties...\\x1b[0m');\n    filterwatch.watch(function(err,log){\n      if(err)return console.error('Filter Watch Error: ',err);\n      const { from, transactionHash } = decodeData(log);\n      if(from!=='0x0000000000000000000000000000000000000000'){\n        Transactions.findOne({ txHash: transactionHash })\n        .then(kitten=>{\n          if(!kitten){\n            return console.log(`\\x1b[90m>>> Skipped [Transaction] event: ${transactionHash} \\x1b[0m`);\n          }else{\n            return Transactions.findOneAndUpdate({\n              txHash: transactionHash\n            },{\n              $set:{\n                status: 'Successful',\n                txHash: transactionHash\n              }\n            },{\n              new: true\n            }).then(updated=>{\n              console.log(`Updated!`, transactionHash);\n            })\n          }\n        })\n        .catch(console.error)\n      }\n    })\n  }\n}"]}