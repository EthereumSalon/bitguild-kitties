{"version":3,"sources":["../src/index.js"],"names":["app","server","http","Server","io","mongoose","connect","mongodbUri","catch","console","error","err","Promise","global","use","bodyParser","json","urlencoded","extended","get","req","res","send","next","log","status","port","process","env","PORT","listen","on","sk","addr","substring","controller","giftingSocket","getLatestGiftingBySocket","api","ETHlistener","start"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,MAAM,wBAAZ;AACA,IAAMC,SAASC,eAAKC,MAAL,CAAYH,GAAZ,CAAf;;AAEA,IAAMI,KAAK,sBAASH,MAAT,CAAX;;AAEA;AACAI,mBAASC,OAAT,CAAiBC,kBAAjB,EACCC,KADD,CACO;AAAA,WAAKC,QAAQC,KAAR,CAAcC,GAAd,CAAL;AAAA,CADP;;AAGAN,mBAASO,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA;AACAZ,IAAIc,GAAJ,CAAQ,qBAAR;AACAd,IAAIc,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAhB,IAAIc,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAR;AACAlB,IAAImB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAYA,IAAIC,IAAJ,CAAS,OAAT,CAAZ;AAAA,CAAb;;AAEAtB,IAAIc,GAAJ,CAAQ,UAACH,GAAD,EAAMS,GAAN,EAAWC,GAAX,EAAgBE,IAAhB,EAAyB;AAC7Bd,YAAQe,GAAR,CAAY,QAAZ,EAAsBb,GAAtB;AACAU,QAAII,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqBX,GAArB;AACH,CAHD;;AAKA;AACA,IAAMe,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA5B,OAAO6B,MAAP,CAAcJ,IAAd,EAAoB,YAAI;AACpBjB,YAAQe,GAAR,8BAAuCE,IAAvC;AACH,CAFD;;AAIA;AACAtB,GAAG2B,EAAH,CAAM,YAAN,EAAoB,UAAUC,EAAV,EAAc;AAC9BA,OAAGD,EAAH,CAAM,8BAAN,EAAsC,UAACE,IAAD,EAAU;AAC5CxB,gBAAQe,GAAR,yCAAkDS,KAAKC,SAAL,CAAe,CAAf,EAAiB,CAAjB,CAAlD;AACAC,6BAAWC,aAAX,CAAyBJ,EAAzB,EAA6BC,IAA7B;AACH,KAHD;AAIAD,OAAGD,EAAH,CAAM,wBAAN,EAAgC,UAACE,IAAD,EAAU;AACtCE,6BAAWE,wBAAX,CAAoCL,EAApC,EAAwCC,IAAxC;AACH,KAFD;AAGH,CARD;;AAUA;AACAjC,IAAIc,GAAJ,CAAQ,MAAR,EAAgBwB,aAAhB;;AAEA;AACAC,mBAAYC,KAAZ","file":"index.js","sourcesContent":["import express from 'express';\nimport http from 'http';\nimport bodyParser from 'body-parser';\nimport socketio from 'socket.io';\nimport cors from 'cors';\nimport mongoose from 'mongoose';\n\nimport api from './api';\nimport ETHlistener from './listener';\nimport controller from './controllor';\nimport { mongodbUri } from './config';\n\nconst app = express();\nconst server = http.Server(app);\n\nconst io = socketio(server);\n\n// DB Setup\nmongoose.connect(mongodbUri)\n.catch(err=>console.error(err));\n\nmongoose.Promise = global.Promise;\n\n// App Setup\napp.use(cors());\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({extended: true}));\napp.get('/', (req, res)=>res.send('works'));\n\napp.use((err, req, res, next) => {\n    console.log('errrrr', err)\n    res.status(500).send(err);\n})\n\n// Server Setup\nconst port = process.env.PORT || 8000;\nserver.listen(port, ()=>{\n    console.log(`>>> Server listening on ${port}`)\n});\n\n// Socket Register\nio.on('connection', function (sk) {\n    sk.on('LISTEN_TO_UPDATE_TRANSACTION', (addr) => {\n        console.log(`\\x1b[96m>>> Socket connection from ${addr.substring(0,7)}\\x1b[0m`);\n        controller.giftingSocket(sk, addr)\n    })\n    sk.on('GET_LATEST_TRANSACTION', (addr) => {\n        controller.getLatestGiftingBySocket(sk, addr)\n    })\n});\n\n// Expose API Route\napp.use('/api', api);\n\n// start listening to ethereum...\nETHlistener.start();"]}